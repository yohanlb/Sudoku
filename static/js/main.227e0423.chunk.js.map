{"version":3,"sources":["components/CellDisplay.jsx","components/Cell.jsx","grid-helper-functions.js","gridValues.js","components/PossibleValues.jsx","components/SolverResult.jsx","App.js","serviceWorker.js","index.js"],"names":["Cell","cell","handleClickOnCell","handleMouseOver","useState","clickedOn","setClickedOn","handleClick","e","isRightClick","key","isGiven","cellClass","highlighted","className","actualValue","onMouseOver","onTransitionEnd","onClick","onContextMenu","guessedValue","displayCellValue","x","y","this","returnEntireRowCells","cells","returnEntireColCells","res","forEach","row","push","returnSquareCells","keys","some","getSeveralCellByKey","dx","Math","floor","dy","squareKeys","cellCoords","returnSquareKeys","getPossibleValuesForCell","considerGuessedValues","valuesAvailability","Array","fill","cellsInRange","concat","filter","item","el","possibleValues","i","solverLoop","solvedCells","nbOfGuessAllowed","nbOfValueFound","nbOfCellWithSeveralPossibilites","length","console","log","arrayA","PossibleValues","map","val","SolverResult","solverResult","App","setCells","setPossibleValues","setSolverResult","useEffect","tempCells","currentRow","col","LoadGridValues","GridValues","ClearGridValues","_cells","newGrid","values","Solve","nbOfCellRemaining","loopCount","loopRes","GridFunc","_cell","newCells","possibleVal","event","_key","preventDefault","clickedCell","search","find","newCellValue","onMouseLeave","rowId","cellId","CellDisplay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.227e0423.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Cell({ cell, handleClickOnCell,handleMouseOver }) {\r\n  const [clickedOn, setClickedOn] = useState(false);\r\n\r\n  const handleClick = (e, isRightClick = false) => {\r\n    handleClickOnCell(e, cell.key, isRightClick);\r\n    setClickedOn(true);\r\n  };\r\n\r\n  const displayCellValue = () => {\r\n    if (cell.isGiven){\r\n      const cellClass = \"cell isGiven \" + (cell.highlighted ? \" highlighted\" : \"\");\r\n      return (\r\n        <div className={cellClass}>\r\n          <span className=\"cell-number\">{cell.actualValue}</span>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else if(cell.actualValue > 0){\r\n      const cellClass = \"cell isSolved \" + (cell.highlighted ? \" highlighted\" : \"\");\r\n      return (\r\n        <div className={cellClass}>\r\n          <span className=\"cell-number\">{cell.actualValue}</span>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else {\r\n      const cellClass = \"cell notGiven \" + (clickedOn ? \" clicked\" : \"\") + (cell.highlighted ? \" highlighted\" : \"\");\r\n      return (\r\n        <div\r\n          className={cellClass}\r\n          onMouseOver={() => {handleMouseOver(cell)}}\r\n          onTransitionEnd={() => {setClickedOn(false)}}\r\n          onClick={(e) => {\r\n            handleClick(e);\r\n          }}\r\n          onContextMenu={(e) => {\r\n            handleClick(e, true);\r\n          }}\r\n        >\r\n          <span className=\"cell-number\">\r\n            {cell.guessedValue === 0 ? \"\" : cell.guessedValue}\r\n          </span>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return displayCellValue();\r\n}\r\n\r\nexport default Cell;\r\n","export default function Cell(key, x, y){\r\n    this.key = key;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.guessedValue = 0;\r\n    this.actualValue = 0;\r\n    this.isGiven = false;\r\n    this.highlighted = false;\r\n}\r\n\r\n\r\n// function printCell(){\r\n//     return \"k:\" + this.key + \" x:\" + this.x + \" y:\" + this.y;\r\n// }","/**\r\n* Return the keys of all the other cells in the Col.\r\n* @param {object} cell an object of type \"cell\".\r\n* @returns {Array} Array of cells keys.\r\n*/\r\nexport const returnEntireColKeys = (cell) => {\r\n\r\n    const res = []\r\n    for (let i = 0; i < 9; i++) {\r\n        //console.log(cell.y + cell.x * i);\r\n        res.push(cell.x + 9 * i);\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\n/**\r\n* Return all the cells in the same row\r\n* @param {Array} cells array of cells.\r\n* @param {object} cell object of type cell.\r\n* @returns {Array} Array of cells object.\r\n*/\r\nexport const returnEntireRowCells = (cells, cell) => {\r\n    return cells[cell.y];\r\n}\r\n\r\n\r\n/**\r\n* Return all the cells in the same col\r\n* @param {Array} cells array of cells.\r\n* @param {object} cell object of type cell.\r\n* @returns {Array} Array of cells object.\r\n*/\r\nexport const returnEntireColCells = (cells, cell) => {\r\n    const res = [];\r\n    cells.forEach(\r\n        (row) => { res.push(row[cell.x]) }\r\n    )\r\n    return res;\r\n\r\n}\r\n\r\nexport const coordToKey = (x ,y) => {\r\n    return ( 9*y + x);\r\n}\r\n\r\nexport const returnSquareKeys = (cell) => {\r\n    const dx = Math.floor(cell.x / 3);\r\n    const dy = Math.floor(cell.y / 3);\r\n\r\n    const squareCoords = [\r\n        [dx * 3 + 0, dy * 3 + 0], [dx * 3 + 1, dy * 3 + 0], [dx * 3 + 2, dy * 3 + 0],\r\n        [dx * 3 + 0, dy * 3 + 1], [dx * 3 + 1, dy * 3 + 1], [dx * 3 + 2, dy * 3 + 1],\r\n        [dx * 3 + 0, dy * 3 + 2], [dx * 3 + 1, dy * 3 + 2], [dx * 3 + 2, dy * 3 + 2]\r\n    ]\r\n\r\n    const squareKeys = []\r\n    \r\n    squareCoords.forEach((cellCoords) => {\r\n        squareKeys.push(coordToKey(cellCoords[0], cellCoords[1]));\r\n    }) \r\n\r\n    return (squareKeys);\r\n}\r\n\r\n\r\n\r\nexport const getSeveralCellByKey = (cells, keys) => {\r\n    const res = [] \r\n    cells.forEach((row)=>{\r\n        row.forEach((cell) =>{\r\n            const isSearched = keys.some((key)=>key ===  cell.key)\r\n            if (isSearched) {res.push(cell);}\r\n            \r\n        })\r\n    })\r\n    \r\n    return res;\r\n}\r\n\r\nexport const returnSquareCells = (cells, cell) => {\r\n    const keys = returnSquareKeys(cell);\r\n    return getSeveralCellByKey (cells, keys) ;\r\n}\r\n\r\n\r\n\r\n\r\nexport const getPossibleValuesForCell = (cells, cell, considerGuessedValues = true) => {\r\n    const valuesAvailability = new Array(9).fill(1);\r\n    \r\n    //get all the cells in range of the selected one\r\n    let cellsInRange = []\r\n    cellsInRange = cellsInRange.concat(returnSquareCells(cells, cell));\r\n    cellsInRange = cellsInRange.concat(returnEntireRowCells(cells, cell));\r\n    cellsInRange = cellsInRange.concat(returnEntireColCells(cells, cell));\r\n\r\n    //filter out the selected cell\r\n    cellsInRange = cellsInRange.filter((item)=>item.key !== cell.key);\r\n\r\n    //find which values are already used among all the cells in range\r\n    cellsInRange.forEach((el)=>{\r\n        if(el.actualValue > 0) valuesAvailability[el.actualValue-1] = 0; \r\n        else if(considerGuessedValues && el.guessedValue > 0) valuesAvailability[el.guessedValue-1] = 0;\r\n    })\r\n\r\n    // create an array with only the available values\r\n    const possibleValues = [];\r\n    valuesAvailability.forEach((el,i) => {\r\n        if(el){possibleValues.push(i+1)}\r\n        //index goes from 0 to 8, but we want to return 1 to 9\r\n    });\r\n\r\n\r\n    return possibleValues;\r\n}\r\n\r\n\r\nexport const solverLoop = (solvedCells, nbOfGuessAllowed) =>{\r\n    let nbOfValueFound = 0;\r\n    let nbOfCellWithSeveralPossibilites = 0;\r\n\r\n    solvedCells.forEach(row => {\r\n        row.forEach(cell => {\r\n            //console.log(cell.key);\r\n            if (cell.actualValue === 0) {\r\n                const possibleValues = getPossibleValuesForCell(solvedCells, cell);\r\n                if (possibleValues.length === 0) {\r\n                    console.log(\"Can't solve cell \", cell.key);\r\n                    return;\r\n                }\r\n                if (possibleValues.length === 1) {\r\n                    cell.actualValue = possibleValues[0];\r\n                    //console.log(\"new value for cell \" , cell.key);\r\n                    nbOfValueFound ++;\r\n                }\r\n                if (possibleValues.length > 1){\r\n                    nbOfCellWithSeveralPossibilites ++;\r\n                }\r\n            }\r\n        })\r\n    })\r\n\r\n    return [nbOfValueFound, nbOfCellWithSeveralPossibilites];\r\n}\r\n\r\nexport const solver = (cells) => {\r\n    let solvedCells = [ ...cells]\r\n    let nbOfValueFound = 0;\r\n    let nbOfCellRemaining = 9*9;\r\n    let nbOfGuessAllowed = 0;\r\n    let status = \"\";\r\n\r\n    let loopCount = 0;\r\n\r\n    while (nbOfCellRemaining > 0 && loopCount < 100){\r\n        \r\n        const loopRes = solverLoop(solvedCells, nbOfGuessAllowed);\r\n        nbOfValueFound = loopRes[0]\r\n        if( nbOfValueFound ===0) \r\n        {\r\n            status = \"Couldn't resolve with simple solver.\"\r\n            break;\r\n        }\r\n        nbOfCellRemaining = loopRes[1];\r\n\r\n        console.log(\"loop count : \" , loopCount);\r\n        loopCount ++;\r\n\r\n    }\r\n    status = \"Solved in \" + loopCount + \" loops.\";\r\n    \r\n    return [solvedCells, status];\r\n}","export const arrayA = [\r\n\r\n1, 0, 6,   0, 0, 2,   3, 0, 0,\r\n0, 5, 0,   0, 0, 6,   0, 9, 1,\r\n0, 0, 9,   5, 0, 1,   4, 6, 2,\r\n\r\n0, 3, 7,   9, 0, 5,   0, 0, 0,\r\n5, 8, 1,   0, 2, 7,   9, 0, 0,\r\n0, 0, 0,   4, 0, 8,   1, 5, 7,\r\n\r\n0, 0, 0,   2, 6, 0,   5, 4, 0,\r\n0, 0, 4,   1, 5, 0,   6, 0, 9,\r\n9, 0, 0,   8, 7, 4,   2, 1, 0,\r\n\r\n]\r\n\r\n\r\n\r\nexport const arrayAcompleted = [\r\n\r\n    1, 4, 6,   7, 9, 2,   3, 8, 5,\r\n    2, 5, 8,   3, 4, 6,   7, 9, 1,\r\n    3, 7, 9,   5, 8, 1,   4, 6, 2,\r\n    \r\n    4, 3, 7,   9, 1, 5,   8, 2, 6,\r\n    5, 8, 1,   6, 2, 7,   9, 3, 4,\r\n    6, 9, 2,   4, 3, 8,   1, 5, 7,\r\n    \r\n    7, 1, 3,   2, 6, 9,   5, 4, 8,\r\n    8, 2, 4,   1, 5, 3,   6, 7, 9,\r\n    9, 6, 5,   8, 7, 4,   2, 1, 3,\r\n    \r\n    ]","import React from \"react\";\r\n\r\nfunction PossibleValues({ possibleValues }) {\r\n  if (possibleValues.length > 0) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          Possible values :\r\n          {possibleValues.map((val) => {\r\n            return <b> {val} </b>\r\n          })}\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default PossibleValues;\r\n","import React from 'react'\r\n\r\nfunction SolverResult({solverResult}) {\r\n    if(solverResult !== \"\"){\r\n        return (\r\n            <div>\r\n                <p><b>Solver result : </b>{solverResult}</p>\r\n            </div>\r\n        )\r\n    }\r\n    else return null;\r\n    \r\n}\r\n\r\nexport default SolverResult\r\n","import React, { useEffect, useState } from 'react';\r\nimport CellDisplay from './components/CellDisplay';\r\nimport Cell from './components/Cell';\r\nimport * as GridFunc from './grid-helper-functions.js';\r\nimport * as GridValues from './gridValues.js';\r\n\r\nimport './App.css';\r\nimport PossibleValues from './components/PossibleValues';\r\nimport SolverResult from './components/SolverResult';\r\n\r\nfunction App() {\r\n\r\n  const numRow = 9;\r\n  const numCol = 9;\r\n\r\n  // let cells = [];\r\n\r\n  const [cells, setCells] = useState([]);\r\n  const [possibleValues, setPossibleValues] = useState([]);\r\n  const [solverResult, setSolverResult] = useState(\"\");\r\n\r\n  // const addCell = (newCell) =>{\r\n  //   console.log(\"Adding cell : \", newCell);\r\n  //   setCells([...cells, newCell]);\r\n  // }\r\n\r\n  useEffect(() => {\r\n\r\n    const tempCells = [];\r\n    let key = 0;\r\n    for (let row = 0; row < numRow; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < numCol; col++) {\r\n        currentRow.push(new Cell(key, col, row));\r\n        key++;\r\n      }\r\n      tempCells.push(currentRow);\r\n    }\r\n\r\n    console.log(tempCells);\r\n    LoadGridValues(tempCells, GridValues.arrayA)\r\n    setCells(tempCells);\r\n\r\n  }, [])\r\n\r\n\r\n  const ClearGridValues = (_cells) => {\r\n    const newGrid = [..._cells];\r\n\r\n    newGrid.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        cell.actualValue = 0;\r\n        cell.guessedValue = 0;\r\n        cell.isGiven = false;\r\n      });\r\n    });\r\n    return newGrid;\r\n\r\n  }\r\n\r\n  const LoadGridValues = (_cells, values) => {\r\n    let newGrid = [..._cells];\r\n\r\n    newGrid = ClearGridValues(newGrid);\r\n    newGrid.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        if (values[cell.key] !== 0) {\r\n          cell.actualValue = values[cell.key];\r\n          cell.isGiven = true;\r\n        }\r\n      });\r\n    });\r\n    return newGrid\r\n    //setCells(newGrid);\r\n  }\r\n\r\n\r\n  const Solve = () =>{\r\n    const solverResult = GridFunc.solver(cells)\r\n    \r\n    setCells(solverResult[0]);\r\n    setSolverResult(solverResult[1]);\r\n  }\r\n\r\n  const handleMouseLeaveGrid = () => {\r\n    setPossibleValues([]);\r\n  }\r\n\r\n  const handleMouseOver = (_cell) =>{\r\n    const newCells = [ ...cells];\r\n    //console.log(\"mouseOver\");\r\n\r\n    const possibleVal = GridFunc.getPossibleValuesForCell(newCells, _cell);\r\n    setPossibleValues(possibleVal);\r\n\r\n    newCells.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        cell.highlighted= false;\r\n      });\r\n    });\r\n    GridFunc.returnSquareCells(newCells, _cell).forEach((cell)=>{cell.highlighted = true});\r\n    GridFunc.returnEntireColCells(newCells, _cell).forEach((cell)=>{cell.highlighted = true});\r\n    GridFunc.returnEntireRowCells(newCells, _cell).forEach((cell)=>{cell.highlighted = true});\r\n    \r\n    setCells(newCells);\r\n  }\r\n\r\n  // row.find( cell => cell.key === _key)\r\n  const handleClickOnCell = (event, _key, isRightClick = false) => {\r\n    event.preventDefault();\r\n    let newCells = [...cells];\r\n\r\n    let clickedCell = null;\r\n    newCells.forEach(row => {\r\n      const search = row.find(cell => cell.key === _key);\r\n      if (search) clickedCell = search;\r\n    });\r\n\r\n    if (clickedCell != null) {\r\n      //console.log(clickedCell);\r\n      //calc new cell value\r\n      let newCellValue = clickedCell.guessedValue + (isRightClick ? -1 : 1);\r\n      newCellValue < 0 && (newCellValue = 9);\r\n      newCellValue > 9 && (newCellValue = 0);\r\n\r\n      //assign the new cell value and update de main array;\r\n      clickedCell.guessedValue = newCellValue;\r\n      setCells(newCells);\r\n\r\n      //GridFunc.returnEntireRowKeys(clickedCell);\r\n  \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <div className=\"grid\" onMouseLeave={handleMouseLeaveGrid}>\r\n        {\r\n          cells.map((row, rowId) => {\r\n            return (\r\n              <div className=\"row\" key={rowId * 100}>\r\n                {row.map((cell, cellId) => <CellDisplay key={cell.key} cell={cell} handleClickOnCell={handleClickOnCell} handleMouseOver={handleMouseOver}/>)}\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n      <button onClick={() => { setCells(LoadGridValues(cells, GridValues.arrayA)) }}>Load default values</button>\r\n      <button onClick={() => { setCells(ClearGridValues(cells)) }}>Clear all</button>\r\n      <button onClick={() => { Solve() }}>Solve</button>\r\n      <PossibleValues possibleValues={possibleValues}/>\r\n      <SolverResult solverResult={solverResult} />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}