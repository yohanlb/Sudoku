{"version":3,"sources":["components/CellDisplay.jsx","components/Cell.jsx","grid-helper-functions.js","gridValues.js","components/PossibleValues.jsx","components/SolverResult.jsx","App.js","serviceWorker.js","index.js"],"names":["Cell","cell","handleClickOnCell","handleMouseOver","useState","clickedOn","setClickedOn","handleClick","e","isRightClick","key","isGiven","cellClass","highlighted","className","onMouseOver","actualValue","onTransitionEnd","onClick","onContextMenu","guessedValue","displayCellValue","x","y","this","returnEntireRowCells","cells","returnEntireColCells","res","forEach","row","push","KeyToCoord","Math","floor","returnSquareCells","keys","some","getSeveralCellByKey","dx","dy","squareKeys","cellCoords","returnSquareKeys","getPossibleValuesForCell","considerGuessedValues","valuesAvailability","Array","fill","cellsInRange","concat","filter","item","el","possibleValues","i","recursiveValidation","_cells","tempCells","coords","currentCell","pValues","v","sovlerWithBackTracking","addToHistory","stepByStep","newCells","JSON","parse","stringify","resString","recursiveValidationStepByStep","arrayA","PossibleValues","length","map","val","SolverResult","solverResult","step","history","App","setCells","setPossibleValues","setSolverResult","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Tick","GridFunc","UpdateCells","shift","_newStep","currentRow","col","console","log","LoadGridValues","GridValues","ClearGridValues","values","SolveBacktracking","_cell","possibleVal","event","_key","preventDefault","clickedCell","search","find","newCellValue","onMouseLeave","rowId","cellId","CellDisplay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.259f6f44.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Cell({ cell, handleClickOnCell,handleMouseOver }) {\r\n  const [clickedOn, setClickedOn] = useState(false);\r\n\r\n  const handleClick = (e, isRightClick = false) => {\r\n    handleClickOnCell(e, cell.key, isRightClick);\r\n    setClickedOn(true);\r\n  };\r\n\r\n  const displayCellValue = () => {\r\n    if (cell.isGiven){\r\n      const cellClass = \"cell isGiven \" + (cell.highlighted ? \" highlighted\" : \"\");\r\n      return (\r\n        <div \r\n        className={cellClass}\r\n        onMouseOver={() => {handleMouseOver(cell)}}\r\n        >\r\n          <span className=\"cell-number\">{cell.actualValue}</span>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else if(cell.actualValue > 0){\r\n      const cellClass = \"cell isSolved \" + (cell.highlighted ? \" highlighted\" : \"\");\r\n      return (\r\n        <div \r\n          className={cellClass}\r\n          onMouseOver={() => {handleMouseOver(cell)}}\r\n        >\r\n          <span className=\"cell-number\">{cell.actualValue}</span>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else {\r\n      const cellClass = \"cell notGiven \" + (clickedOn ? \" clicked\" : \"\") + (cell.highlighted ? \" highlighted\" : \"\");\r\n      return (\r\n        <div\r\n          className={cellClass}\r\n          onMouseOver={() => {handleMouseOver(cell)}}\r\n          onTransitionEnd={() => {setClickedOn(false)}}\r\n          onClick={(e) => {\r\n            handleClick(e);\r\n          }}\r\n          onContextMenu={(e) => {\r\n            handleClick(e, true);\r\n          }}\r\n        >\r\n          <span className=\"cell-number\">\r\n            {cell.guessedValue === 0 ? \"\" : cell.guessedValue}\r\n          </span>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return displayCellValue();\r\n}\r\n\r\nexport default Cell;\r\n","export default function Cell(key, x, y){\r\n    this.key = key;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.guessedValue = 0;\r\n    this.actualValue = 0;\r\n    this.isGiven = false;\r\n    this.highlighted = false;\r\n}\r\n\r\n\r\n// function printCell(){\r\n//     return \"k:\" + this.key + \" x:\" + this.x + \" y:\" + this.y;\r\n// }","/**\r\n* Return the keys of all the other cells in the Col.\r\n* @param {object} cell an object of type \"cell\".\r\n* @returns {Array} Array of cells keys.\r\n*/\r\nexport const returnEntireColKeys = (cell) => {\r\n\r\n    const res = []\r\n    for (let i = 0; i < 9; i++) {\r\n        //console.log(cell.y + cell.x * i);\r\n        res.push(cell.x + 9 * i);\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\n/**\r\n* Return all the cells in the same row\r\n* @param {Array} cells array of cells.\r\n* @param {object} cell object of type cell.\r\n* @returns {Array} Array of cells object.\r\n*/\r\nexport const returnEntireRowCells = (cells, cell) => {\r\n    return cells[cell.y];\r\n}\r\n\r\n\r\n/**\r\n* Return all the cells in the same col\r\n* @param {Array} cells array of cells.\r\n* @param {object} cell object of type cell.\r\n* @returns {Array} Array of cells object.\r\n*/\r\nexport const returnEntireColCells = (cells, cell) => {\r\n    const res = [];\r\n    cells.forEach(\r\n        (row) => { res.push(row[cell.x]) }\r\n    )\r\n    return res;\r\n\r\n}\r\n\r\nexport const coordToKey = (x ,y) => {\r\n    return ( 9*y + x);\r\n}\r\nexport const KeyToCoord = (key) => {\r\n    return ([key%9,Math.floor(key/9)] );\r\n}\r\n\r\n\r\n\r\nexport const returnSquareKeys = (cell) => {\r\n    const dx = Math.floor(cell.x / 3);\r\n    const dy = Math.floor(cell.y / 3);\r\n\r\n    const squareCoords = [\r\n        [dx * 3 + 0, dy * 3 + 0], [dx * 3 + 1, dy * 3 + 0], [dx * 3 + 2, dy * 3 + 0],\r\n        [dx * 3 + 0, dy * 3 + 1], [dx * 3 + 1, dy * 3 + 1], [dx * 3 + 2, dy * 3 + 1],\r\n        [dx * 3 + 0, dy * 3 + 2], [dx * 3 + 1, dy * 3 + 2], [dx * 3 + 2, dy * 3 + 2]\r\n    ]\r\n\r\n    const squareKeys = []\r\n    \r\n    squareCoords.forEach((cellCoords) => {\r\n        squareKeys.push(coordToKey(cellCoords[0], cellCoords[1]));\r\n    }) \r\n\r\n    return (squareKeys);\r\n}\r\n\r\n\r\n\r\nexport const getSeveralCellByKey = (cells, keys) => {\r\n    const res = [] \r\n    cells.forEach((row)=>{\r\n        row.forEach((cell) =>{\r\n            const isSearched = keys.some((key)=>key ===  cell.key)\r\n            if (isSearched) {res.push(cell);}\r\n            \r\n        })\r\n    })\r\n    \r\n    return res;\r\n}\r\n\r\nexport const returnSquareCells = (cells, cell) => {\r\n    const keys = returnSquareKeys(cell);\r\n    return getSeveralCellByKey (cells, keys) ;\r\n}\r\n\r\n\r\n\r\n\r\nexport const getPossibleValuesForCell = (cells, cell, considerGuessedValues = true) => {\r\n    const valuesAvailability = new Array(9).fill(1);\r\n    \r\n    //get all the cells in range of the selected one\r\n    let cellsInRange = []\r\n    cellsInRange = cellsInRange.concat(returnSquareCells(cells, cell));\r\n    cellsInRange = cellsInRange.concat(returnEntireRowCells(cells, cell));\r\n    cellsInRange = cellsInRange.concat(returnEntireColCells(cells, cell));\r\n\r\n    //filter out the selected cell\r\n    cellsInRange = cellsInRange.filter((item)=>item.key !== cell.key);\r\n\r\n    //find which values are already used among all the cells in range\r\n    cellsInRange.forEach((el)=>{\r\n        if(el.actualValue > 0) valuesAvailability[el.actualValue-1] = 0; \r\n        else if(considerGuessedValues && el.guessedValue > 0) valuesAvailability[el.guessedValue-1] = 0;\r\n    })\r\n\r\n    // create an array with only the available values\r\n    const possibleValues = [];\r\n    valuesAvailability.forEach((el,i) => {\r\n        if(el){possibleValues.push(i+1)}\r\n        //index goes from 0 to 8, but we want to return 1 to 9\r\n    });\r\n\r\n\r\n    return possibleValues;\r\n}\r\n\r\n\r\nexport const solverLoop = (solvedCells, nbOfGuessAllowed) =>{\r\n    let nbOfValueFound = 0;\r\n    let nbOfCellWithSeveralPossibilites = 0;\r\n\r\n    solvedCells.forEach(row => {\r\n        row.forEach(cell => {\r\n            //console.log(cell.key);\r\n            if (cell.actualValue === 0) {\r\n                const possibleValues = getPossibleValuesForCell(solvedCells, cell);\r\n                if (possibleValues.length === 0) {\r\n                    console.log(\"Can't solve cell \", cell.key);\r\n                    return;\r\n                }\r\n                if (possibleValues.length === 1) {\r\n                    cell.actualValue = possibleValues[0];\r\n                    //console.log(\"new value for cell \" , cell.key);\r\n                    nbOfValueFound ++;\r\n                }\r\n                if (possibleValues.length > 1){\r\n                    nbOfCellWithSeveralPossibilites ++;\r\n                }\r\n            }\r\n        })\r\n    })\r\n\r\n    return [nbOfValueFound, nbOfCellWithSeveralPossibilites];\r\n}\r\n\r\nexport const solver = (cells) => {\r\n    let solvedCells = [ ...cells]\r\n    let nbOfValueFound = 0;\r\n    let nbOfCellRemaining = 9*9;\r\n    let nbOfGuessAllowed = 0;\r\n    let status = \"\";\r\n\r\n    let loopCount = 0;\r\n    while (nbOfCellRemaining > 0 && loopCount < 100){\r\n        \r\n        const loopRes = solverLoop(solvedCells, nbOfGuessAllowed);\r\n        nbOfValueFound = loopRes[0]\r\n        if( nbOfValueFound ===0) \r\n        {\r\n            console.log(\"break\");\r\n            status = \"Couldn't resolve with simple solver.\"\r\n            break;\r\n        }\r\n        nbOfCellRemaining = loopRes[1];\r\n\r\n        console.log(\"loop count : \" , loopCount);\r\n        loopCount ++;\r\n\r\n    }\r\n    if(nbOfCellRemaining === 0) status = \"Solved in \" + loopCount + \" loops.\";\r\n    \r\n    return [solvedCells, status];\r\n}\r\n\r\n\r\n\r\n// return -1 if nothing to solve\r\n// 0->80 if key found\r\nexport const getNextCellToSolve = (_cells, _cell) => {\r\n    let keyToFind = _cell.key+1 >= 9*9 ? 0 : _cell.key+1;\r\n    console.log(_cell.key, keyToFind);\r\n    const maxLoop = 9*9;\r\n    let i = 0;\r\n    while(i < maxLoop){\r\n        const coords = KeyToCoord(keyToFind);\r\n        console.log(\"coords : \"+ coords);\r\n        const cellToCheck = _cells[coords[1]][coords[0]];\r\n        \r\n        if(cellToCheck.actualValue <= 0){\r\n            return cellToCheck\r\n        }\r\n\r\n        keyToFind = keyToFind+1 >= 9*9 ? 0 : keyToFind+1;\r\n        i++;\r\n    }\r\n    return -1;\r\n}\r\n\r\n\r\n\r\n\r\nexport const recursiveValidation = (_cells, key) => {\r\n    const tempCells = [ ..._cells];\r\n\r\n    const useGuessedValues = true;\r\n    //console.log(\"key : \", key);\r\n    if (key >= 9 * 9) { return true }  //Solving finished\r\n\r\n    const coords = KeyToCoord(key);\r\n    const currentCell = tempCells[coords[1]][coords[0]];\r\n    if (currentCell.actualValue > 0 || (useGuessedValues && currentCell.guessedValue > 0)) {\r\n        // this cell is already solved, go to next cell\r\n        return recursiveValidation(tempCells, key + 1);\r\n    }\r\n\r\n    const pValues = getPossibleValuesForCell(tempCells, currentCell);\r\n    for (let v = 1; v <= 9; v++) {\r\n        //console.log(\"key : \", currentCell.key, \"v :  \", v, \"pValues : \", pValues);\r\n        if (pValues.some(e=> e === v)){\r\n            currentCell.actualValue = v;\r\n            // try to resolve the rest of the array with this value for the current cell\r\n            if ( recursiveValidation (tempCells, key+1) )\r\n                return true; \r\n        }\r\n\r\n    }\r\n\r\n    currentCell.actualValue = 0 ; // no value possible for this cell, reset it to 0.\r\n    return false // this grill is not solvable, going back to previous recursion.\r\n}\r\n\r\n\r\n\r\nexport const sovlerWithBackTracking = (_cells, addToHistory, stepByStep = false) =>{\r\n    const newCells = JSON.parse(JSON.stringify(_cells));\r\n    \r\n    let res;\r\n    if(stepByStep){\r\n        res = recursiveValidationStepByStep(newCells, 0, addToHistory);\r\n    }\r\n    else{\r\n        res = recursiveValidation(newCells, 0);\r\n\r\n    }\r\n    //UpdateCells(newCells);\r\n    const resString = res ? \"Solved with success\" : \"Error\"\r\n    return [newCells, resString];\r\n}\r\n\r\n\r\nexport const recursiveValidationStepByStep = (_cells, key, addToHistory) => {\r\n\r\n    const useGuessedValues = true;\r\n    //console.log(\"key : \", key);\r\n    if (key >= 9 * 9) { return true }  //Solving finished\r\n\r\n    const coords = KeyToCoord(key);\r\n    const currentCell = _cells[coords[1]][coords[0]];\r\n    if (currentCell.actualValue > 0 || (useGuessedValues && currentCell.guessedValue > 0)) {\r\n        // this cell is already solved, go to next cell\r\n        return recursiveValidationStepByStep(_cells, key + 1, addToHistory);\r\n    }\r\n\r\n\r\n\r\n    const pValues = getPossibleValuesForCell(_cells, currentCell);\r\n    for (let v = 1; v <= 9; v++) {\r\n        //console.log(\"key : \", currentCell.key, \"v :  \", v, \"pValues : \", pValues);\r\n        if (pValues.some(e=> e === v)){\r\n            currentCell.actualValue = v;\r\n            \r\n            addToHistory( {\r\n                key:currentCell.key,\r\n                actualValue:v\r\n            } )\r\n\r\n            // try to resolve the rest of the array with this value for the current cell\r\n            if ( recursiveValidationStepByStep (_cells, key+1, addToHistory) )\r\n                return true; \r\n        }\r\n\r\n    }\r\n\r\n    currentCell.actualValue = 0 ; // no value possible for this cell, reset it to 0.\r\n    return false // this grill is not solvable, going back to previous recursion.\r\n}\r\n\r\n\r\nexport const sleep = (ms) => {\r\n    const date = Date.now();\r\n    let currentDate = null;\r\n    do {\r\n      currentDate = Date.now();\r\n    } while (currentDate - date < ms);\r\n  }","export const arrayA = [\r\n\r\n1, 0, 6,   0, 0, 2,   3, 0, 0,\r\n0, 5, 0,   0, 0, 6,   0, 9, 1,\r\n0, 0, 9,   5, 0, 1,   4, 6, 2,\r\n\r\n0, 3, 7,   9, 0, 5,   0, 0, 0,\r\n5, 8, 1,   0, 2, 7,   9, 0, 0,\r\n0, 0, 0,   4, 0, 8,   1, 5, 7,\r\n\r\n0, 0, 0,   2, 6, 0,   5, 4, 0,\r\n0, 0, 4,   1, 5, 0,   6, 0, 9,\r\n9, 0, 0,   8, 7, 4,   2, 1, 0,\r\n\r\n]\r\n\r\n\r\n\r\nexport const arrayAcompleted = [\r\n\r\n    1, 4, 6,   7, 9, 2,   3, 8, 5,\r\n    2, 5, 8,   3, 4, 6,   7, 9, 1,\r\n    3, 7, 9,   5, 8, 1,   4, 6, 2,\r\n    \r\n    4, 3, 7,   9, 1, 5,   8, 2, 6,\r\n    5, 8, 1,   6, 2, 7,   9, 3, 4,\r\n    6, 9, 2,   4, 3, 8,   1, 5, 7,\r\n    \r\n    7, 1, 3,   2, 6, 9,   5, 4, 8,\r\n    8, 2, 4,   1, 5, 3,   6, 7, 9,\r\n    9, 6, 5,   8, 7, 4,   2, 1, 3,\r\n    \r\n    ]","import React from \"react\";\r\n\r\nfunction PossibleValues({ possibleValues }) {\r\n  if (possibleValues.length > 0) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          Possible values :\r\n          {possibleValues.map((val) => {\r\n            return <b key={val}> {val} </b>\r\n          })}\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default PossibleValues;\r\n","import React from 'react'\r\n\r\nfunction SolverResult({solverResult, step}) {\r\n    if(solverResult !== \"\"){\r\n        return (\r\n            <div>\r\n                <p><b>Solver result : </b>{solverResult}</p>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n    else return null\r\n    \r\n}\r\n\r\nexport default SolverResult\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport CellDisplay from './components/CellDisplay';\r\nimport Cell from './components/Cell';\r\nimport * as GridFunc from './grid-helper-functions.js';\r\nimport * as GridValues from './gridValues.js';\r\n\r\nimport './App.css';\r\nimport PossibleValues from './components/PossibleValues';\r\nimport SolverResult from './components/SolverResult';\r\n\r\nlet history = [];\r\n\r\nfunction App() {\r\n\r\n  const numRow = 9;\r\n  const numCol = 9;\r\n\r\n\r\n\r\n  const [cells, setCells] = useState([]);\r\n  const [possibleValues, setPossibleValues] = useState([]);\r\n  const [solverResult, setSolverResult] = useState(\"\");\r\n  //const [history, setHistory ] = useState([]);\r\n\r\n \r\n\r\n  useInterval(() => {\r\n    Tick()\r\n  }, 50);\r\n\r\n  \r\n  const Tick = () => {\r\n\r\n\r\n    // PLAY HISTORY\r\n    if(history.length > 0){\r\n      const newCells = JSON.parse(JSON.stringify(cells));\r\n\r\n      const [x, y] = GridFunc.KeyToCoord(history[0].key);\r\n      newCells[y][x].actualValue = history[0].actualValue ;\r\n      UpdateCells(newCells)\r\n      history.shift()\r\n\r\n    } \r\n\r\n  }\r\n\r\n  \r\n\r\n   \r\n  const addToHistory = (_newStep) =>{\r\n    history = history.concat(_newStep);\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    let tempCells = [];\r\n    let key = 0;\r\n    for (let row = 0; row < numRow; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < numCol; col++) {\r\n        currentRow.push(new Cell(key, col, row));\r\n        key++;\r\n      }\r\n      tempCells.push(currentRow);\r\n    }\r\n\r\n    console.log(tempCells);\r\n    tempCells = LoadGridValues(tempCells, GridValues.arrayA)\r\n    setCells(tempCells);\r\n\r\n\r\n  }, [])\r\n\r\n\r\n  const ClearGridValues = (_cells) => {\r\n    let newCells = JSON.parse(JSON.stringify(_cells));\r\n    history = []; //clear history\r\n    newCells.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        cell.actualValue = 0;\r\n        cell.guessedValue = 0;\r\n        cell.isGiven = false;\r\n      });\r\n    });\r\n    return newCells;\r\n\r\n  }\r\n\r\n  const LoadGridValues = (_cells, values) => {\r\n    let newCells = JSON.parse(JSON.stringify(_cells));\r\n    history = []; //clear history\r\n    newCells = ClearGridValues(newCells);\r\n    newCells.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        if (values[cell.key] !== 0) {\r\n          cell.actualValue = values[cell.key];\r\n          cell.isGiven = true;\r\n        }\r\n      });\r\n    });\r\n    return newCells\r\n  }\r\n\r\n  const UpdateCells = (_cells) =>{\r\n    setCells(_cells);\r\n\r\n  }\r\n\r\n  \r\n  const Solve = () =>{\r\n    const solverResult = GridFunc.solver(cells)\r\n    \r\n    setCells(solverResult[0]);\r\n    setSolverResult(solverResult[1]);\r\n  }\r\n  \r\n\r\n  const SolveBacktracking = (stepByStep = false) => {\r\n    const newCells = JSON.parse(JSON.stringify(cells));\r\n    const solverResult = GridFunc.sovlerWithBackTracking(newCells, addToHistory, stepByStep)\r\n\r\n    if(!stepByStep){\r\n      setCells(solverResult[0]);\r\n    }\r\n    setSolverResult(solverResult[1]);\r\n  }\r\n\r\n  const handleMouseLeaveGrid = () => {\r\n    setPossibleValues([]);\r\n  }\r\n\r\n  const handleMouseOver = (_cell) =>{\r\n    const newCells = JSON.parse(JSON.stringify(cells));\r\n\r\n    const possibleVal = GridFunc.getPossibleValuesForCell(newCells, _cell);\r\n    setPossibleValues(possibleVal);\r\n\r\n    newCells.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        cell.highlighted= false;\r\n      });\r\n    });\r\n    GridFunc.returnSquareCells(newCells, _cell).forEach((cell)=>{cell.highlighted = true});\r\n    GridFunc.returnEntireColCells(newCells, _cell).forEach((cell)=>{cell.highlighted = true});\r\n    GridFunc.returnEntireRowCells(newCells, _cell).forEach((cell)=>{cell.highlighted = true});\r\n    \r\n    setCells(newCells);\r\n    \r\n  }\r\n\r\n  // row.find( cell => cell.key === _key)\r\n  const handleClickOnCell = (event, _key, isRightClick = false) => {\r\n    event.preventDefault();\r\n    const newCells = JSON.parse(JSON.stringify(cells));\r\n\r\n    let clickedCell = null;\r\n    newCells.forEach(row => {\r\n      const search = row.find(cell => cell.key === _key);\r\n      if (search) clickedCell = search;\r\n    });\r\n\r\n    if (clickedCell != null) {\r\n      //console.log(clickedCell);\r\n      //calc new cell value\r\n      let newCellValue = clickedCell.guessedValue + (isRightClick ? -1 : 1);\r\n      newCellValue < 0 && (newCellValue = 9);\r\n      newCellValue > 9 && (newCellValue = 0);\r\n\r\n      //assign the new cell value and update de main array;\r\n      clickedCell.guessedValue = newCellValue;\r\n      setCells(newCells);\r\n\r\n      //GridFunc.returnEntireRowKeys(clickedCell);\r\n  \r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <div className=\"grid\" onMouseLeave={handleMouseLeaveGrid}>\r\n        {\r\n          cells.map((row, rowId) => {\r\n            return (\r\n              <div className=\"row\" key={rowId * 100}>\r\n                {row.map((cell, cellId) => <CellDisplay key={cell.key} cell={cell} handleClickOnCell={handleClickOnCell} handleMouseOver={handleMouseOver} />)}\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n      <button onClick={() => { setCells(LoadGridValues(cells, GridValues.arrayA)) }}>Load default values</button>\r\n      <button onClick={() => { setCells(ClearGridValues(cells)) }}>Clear all</button>\r\n      <button onClick={() => { SolveBacktracking(false) }}>Solve</button>\r\n      <button onClick={() => { SolveBacktracking(true) }}>Solve (step by step)</button>\r\n      <PossibleValues possibleValues={possibleValues}/>\r\n      <SolverResult solverResult={solverResult} />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Se souvenir de la dernière fonction de rappel.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  });\r\n\r\n  // Configurer l’intervalle.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}