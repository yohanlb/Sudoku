{"version":3,"sources":["components/CellDisplay.jsx","components/Cell.jsx","grid-helper-functions.js","gridValues.js","App.js","serviceWorker.js","index.js"],"names":["Cell","cell","handleClickOnCell","useState","clickedOn","setClickedOn","handleClick","e","isRightClick","key","isGiven","className","actualValue","cellClass","onTransitionEnd","onClick","onContextMenu","guessedValue","displayCellValue","x","y","this","returnEntireColCells","cells","res","forEach","row","push","arrayA","App","setCells","useEffect","tempCells","currentRow","col","console","log","ClearGridValues","newGrid","event","_key","preventDefault","newCells","clickedCell","search","find","newCellValue","test","GridFunc","map","rowId","cellId","CellDisplay","values","LoadGridValues","GridValues","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f3ed58c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Cell({ cell, handleClickOnCell }) {\r\n  const [clickedOn, setClickedOn] = useState(false);\r\n\r\n  const handleClick = (e, isRightClick = false) => {\r\n    handleClickOnCell(e, cell.key, isRightClick);\r\n    setClickedOn(true);\r\n  };\r\n\r\n  const displayCellValue = () => {\r\n    if (cell.isGiven)\r\n      return (\r\n        <div className=\"cell isGiven\">\r\n          <span className=\"cell-number\">{cell.actualValue}</span>\r\n        </div>\r\n      );\r\n      \r\n\r\n    else {\r\n      const cellClass = \"cell notGiven \" + (clickedOn ? \" clicked\" : \"\");\r\n      return (\r\n        <div\r\n          className={cellClass}\r\n          onTransitionEnd={() => {setClickedOn(false)}}\r\n          onClick={(e) => {\r\n            handleClick(e);\r\n          }}\r\n          onContextMenu={(e) => {\r\n            handleClick(e, true);\r\n          }}\r\n        >\r\n          <span className=\"cell-number\">\r\n            {cell.guessedValue === 0 ? \"\" : cell.guessedValue}\r\n          </span>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return displayCellValue();\r\n}\r\n\r\nexport default Cell;\r\n","export default function Cell(key, x, y){\r\n    this.key = key;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.guessedValue = 0;\r\n    this.actualValue = 0;\r\n    this.isGiven = false;\r\n\r\n}\r\n\r\n\r\n// function printCell(){\r\n//     return \"k:\" + this.key + \" x:\" + this.x + \" y:\" + this.y;\r\n// }","/**\r\n* Return the keys of all the other cells in the Col.\r\n* @param {object} cell an object of type \"cell\".\r\n* @returns {Array} Array of cells keys.\r\n*/\r\nexport const returnEntireColKeys = (cell) => {\r\n\r\n    const res = []\r\n    for (let i = 0; i < 9; i++) {\r\n        //console.log(cell.y + cell.x * i);\r\n        res.push(cell.x + 9 * i);\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\n/**\r\n* Return all the cells in the same row\r\n* @param {Array} cells array of cells.\r\n* @param {object} cell object of type cell.\r\n* @returns {Array} Array of cells object.\r\n*/\r\nexport const returnEntireRowCells = (cells, cell) => {\r\n    return cells[cell.y];\r\n}\r\n\r\n\r\n/**\r\n* Return all the cells in the same col\r\n* @param {Array} cells array of cells.\r\n* @param {object} cell object of type cell.\r\n* @returns {Array} Array of cells object.\r\n*/\r\nexport const returnEntireColCells = (cells, cell) => {\r\n    const res = [];\r\n    cells.forEach(\r\n        (row)=>{ res.push(row[cell.x])}\r\n    )\r\n    return res;\r\n\r\n}\r\n\r\n\r\n\r\n","export const arrayA = [\r\n\r\n1, 0, 6,   0, 0, 2,   3, 0, 0,\r\n0, 5, 0,   0, 0, 6,   0, 9, 1,\r\n0, 0, 9,   5, 0, 1,   4, 6, 2,\r\n\r\n0, 3, 7,   9, 0, 5,   0, 0, 0,\r\n5, 8, 1,   0, 2, 7,   9, 0, 0,\r\n0, 0, 0,   4, 0, 8,   1, 5, 7,\r\n\r\n0, 0, 0,   2, 6, 0,   5, 4, 0,\r\n0, 0, 4,   1, 5, 0,   6, 0, 9,\r\n9, 0, 0,   8, 7, 4,   2, 1, 0,\r\n\r\n]\r\n\r\n\r\n\r\nexport const arrayAcompleted = [\r\n\r\n    1, 4, 6,   7, 9, 2,   3, 8, 5,\r\n    2, 5, 8,   3, 4, 6,   7, 9, 1,\r\n    3, 7, 9,   5, 8, 1,   4, 6, 2,\r\n    \r\n    4, 3, 7,   9, 1, 5,   8, 2, 6,\r\n    5, 8, 1,   6, 2, 7,   9, 3, 4,\r\n    6, 9, 2,   4, 3, 8,   1, 5, 7,\r\n    \r\n    7, 1, 3,   2, 6, 9,   5, 4, 8,\r\n    8, 2, 4,   1, 5, 3,   6, 7, 9,\r\n    9, 6, 5,   8, 7, 4,   2, 1, 3,\r\n    \r\n    ]","import React, { useEffect, useState } from 'react';\nimport CellDisplay from './components/CellDisplay';\nimport Cell from './components/Cell';\nimport * as GridFunc from './grid-helper-functions.js';\nimport * as GridValues from './gridValues.js';\n\nimport './App.css';\n\nfunction App() {\n\n  const numRow = 9;\n  const numCol = 9;\n\n  // let cells = [];\n\n  const [cells, setCells] = useState([]);\n\n  // const addCell = (newCell) =>{\n  //   console.log(\"Adding cell : \", newCell);\n  //   setCells([...cells, newCell]);\n  // }\n\n  useEffect(() => {\n    \n    const tempCells = [];\n    let key = 0;\n    for (let row = 0; row < numRow; row++) {\n      const currentRow = [];\n      for (let col = 0; col < numCol; col++) {\n        currentRow.push(new Cell(key, col, row));\n        key++;\n      }\n      tempCells.push(currentRow);\n    }\n    \n    console.log(tempCells);\n    setCells(tempCells);\n\n  }, [])\n\n\n  const ClearGridValues = () =>{\n    const newGrid = [...cells];\n    \n\n    newGrid.forEach((row)=>{\n      row.forEach((cell)=>{\n          cell.actualValue = 0;\n          cell.guessedValue = 0;\n          cell.isGiven = false;\n      });\n    });\n    setCells(newGrid);\n\n  }\n\n  const LoadGridValues = (values) => {\n    ClearGridValues();\n    const newGrid = [...cells];\n\n    newGrid.forEach((row)=>{\n      row.forEach((cell)=>{\n        if(values[cell.key] !== 0){\n          cell.actualValue = values[cell.key];\n          cell.isGiven = true;\n        }\n      });\n    });\n    setCells(newGrid);\n  }\n\n// row.find( cell => cell.key === _key)\n  const handleClickOnCell = (event, _key, isRightClick = false) => {\n    event.preventDefault();\n    let newCells = [...cells];\n    \n    let clickedCell = null;\n    newCells.forEach(row => {\n      const search = row.find( cell => cell.key === _key) ;\n      if (search) clickedCell = search;\n    });\n    \n    if(clickedCell != null){\n      console.log(clickedCell);\n      //calc new cell value\n      let newCellValue = clickedCell.guessedValue + (isRightClick ? -1 : 1);\n      newCellValue < 0 && (newCellValue = 9);\n      newCellValue > 9 && (newCellValue = 0);\n\n      //assign the new cell value and update de main array;\n      clickedCell.guessedValue = newCellValue;\n      setCells(newCells);\n\n      \n      //GridFunc.returnEntireRowKeys(clickedCell);\n\n      let test = GridFunc.returnEntireColCells(cells,clickedCell)\n      console.log(test);\n    }\n\n\n\n\n    \n  }\n\n  return (\n    <div className=\"App\">\n\n\n      {\n        cells.map((row, rowId) => {\n          return (\n            <div key={rowId*100}> \n              {row.map((cell, cellId)=><CellDisplay key={cell.key}  cell={cell} handleClickOnCell={handleClickOnCell}/>)}\n              </div>\n          )\n        })\n      }\n\n      <button onClick={()=>{LoadGridValues(GridValues.arrayA)}}>Load default values</button>\n      <button onClick={()=>{ClearGridValues()}}>Clear all</button>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}