{"version":3,"sources":["components/CellDisplay.jsx","components/Cell.jsx","grid-helper-functions.js","gridValues.js","App.js","serviceWorker.js","index.js"],"names":["Cell","cell","handleClickOnCell","useState","clickedOn","setClickedOn","handleClick","e","isRightClick","key","isGiven","className","actualValue","cellClass","highlighted","onTransitionEnd","onClick","onContextMenu","guessedValue","displayCellValue","x","y","this","returnEntireRowCells","cells","returnEntireColCells","res","forEach","row","push","returnSquareKeys","dx","Math","floor","dy","arrayA","App","setCells","useEffect","tempCells","currentRow","col","console","log","ClearGridValues","newGrid","GetCellByCoord","event","_key","preventDefault","newCells","clickedCell","search","find","newCellValue","square","GridFunc","coords","map","rowId","cellId","CellDisplay","values","LoadGridValues","GridValues","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b2c4d36.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Cell({ cell, handleClickOnCell }) {\r\n  const [clickedOn, setClickedOn] = useState(false);\r\n\r\n  const handleClick = (e, isRightClick = false) => {\r\n    handleClickOnCell(e, cell.key, isRightClick);\r\n    setClickedOn(true);\r\n  };\r\n\r\n  const displayCellValue = () => {\r\n    if (cell.isGiven)\r\n      return (\r\n        <div className=\"cell isGiven\">\r\n          <span className=\"cell-number\">{cell.actualValue}</span>\r\n        </div>\r\n      );\r\n      \r\n\r\n    else {\r\n      const cellClass = \"cell notGiven \" + (clickedOn ? \" clicked\" : \"\") + (cell.highlighted ? \" highlighted\" : \"\");\r\n      return (\r\n        <div\r\n          className={cellClass}\r\n          onTransitionEnd={() => {setClickedOn(false)}}\r\n          onClick={(e) => {\r\n            handleClick(e);\r\n          }}\r\n          onContextMenu={(e) => {\r\n            handleClick(e, true);\r\n          }}\r\n        >\r\n          <span className=\"cell-number\">\r\n            {cell.guessedValue === 0 ? \"\" : cell.guessedValue}\r\n          </span>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return displayCellValue();\r\n}\r\n\r\nexport default Cell;\r\n","export default function Cell(key, x, y){\r\n    this.key = key;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.guessedValue = 0;\r\n    this.actualValue = 0;\r\n    this.isGiven = false;\r\n    this.highlighted = false;\r\n}\r\n\r\n\r\n// function printCell(){\r\n//     return \"k:\" + this.key + \" x:\" + this.x + \" y:\" + this.y;\r\n// }","/**\r\n* Return the keys of all the other cells in the Col.\r\n* @param {object} cell an object of type \"cell\".\r\n* @returns {Array} Array of cells keys.\r\n*/\r\nexport const returnEntireColKeys = (cell) => {\r\n\r\n    const res = []\r\n    for (let i = 0; i < 9; i++) {\r\n        //console.log(cell.y + cell.x * i);\r\n        res.push(cell.x + 9 * i);\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\n/**\r\n* Return all the cells in the same row\r\n* @param {Array} cells array of cells.\r\n* @param {object} cell object of type cell.\r\n* @returns {Array} Array of cells object.\r\n*/\r\nexport const returnEntireRowCells = (cells, cell) => {\r\n    return cells[cell.y];\r\n}\r\n\r\n\r\n/**\r\n* Return all the cells in the same col\r\n* @param {Array} cells array of cells.\r\n* @param {object} cell object of type cell.\r\n* @returns {Array} Array of cells object.\r\n*/\r\nexport const returnEntireColCells = (cells, cell) => {\r\n    const res = [];\r\n    cells.forEach(\r\n        (row)=>{ res.push(row[cell.x])}\r\n    )\r\n    return res;\r\n\r\n}\r\n\r\n\r\nexport const returnSquareKeys = (cell) => {\r\n    const dx = Math.floor(cell.x / 3 );\r\n    const dy = Math.floor(cell.y / 3 );\r\n    const rx = cell.x % 3;\r\n    const ry = cell.y % 3;\r\n\r\n    const square =[\r\n        [dx*3+0, dy*3+0],[dx*3+1, dy*3+0],[dx*3+2, dy*3+0], \r\n        [dx*3+0, dy*3+1],[dx*3+1, dy*3+1],[dx*3+2, dy*3+1],\r\n        [dx*3+0, dy*3+2],[dx*3+1, dy*3+2],[dx*3+2, dy*3+2] \r\n     ]\r\n    \r\n\r\n    return(square);\r\n}\r\n\r\nexport const getCellByCoord = (cells, x, y) => {\r\n\r\n}\r\n\r\n\r\n","export const arrayA = [\r\n\r\n1, 0, 6,   0, 0, 2,   3, 0, 0,\r\n0, 5, 0,   0, 0, 6,   0, 9, 1,\r\n0, 0, 9,   5, 0, 1,   4, 6, 2,\r\n\r\n0, 3, 7,   9, 0, 5,   0, 0, 0,\r\n5, 8, 1,   0, 2, 7,   9, 0, 0,\r\n0, 0, 0,   4, 0, 8,   1, 5, 7,\r\n\r\n0, 0, 0,   2, 6, 0,   5, 4, 0,\r\n0, 0, 4,   1, 5, 0,   6, 0, 9,\r\n9, 0, 0,   8, 7, 4,   2, 1, 0,\r\n\r\n]\r\n\r\n\r\n\r\nexport const arrayAcompleted = [\r\n\r\n    1, 4, 6,   7, 9, 2,   3, 8, 5,\r\n    2, 5, 8,   3, 4, 6,   7, 9, 1,\r\n    3, 7, 9,   5, 8, 1,   4, 6, 2,\r\n    \r\n    4, 3, 7,   9, 1, 5,   8, 2, 6,\r\n    5, 8, 1,   6, 2, 7,   9, 3, 4,\r\n    6, 9, 2,   4, 3, 8,   1, 5, 7,\r\n    \r\n    7, 1, 3,   2, 6, 9,   5, 4, 8,\r\n    8, 2, 4,   1, 5, 3,   6, 7, 9,\r\n    9, 6, 5,   8, 7, 4,   2, 1, 3,\r\n    \r\n    ]","import React, { useEffect, useState } from 'react';\r\nimport CellDisplay from './components/CellDisplay';\r\nimport Cell from './components/Cell';\r\nimport * as GridFunc from './grid-helper-functions.js';\r\nimport * as GridValues from './gridValues.js';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  const numRow = 9;\r\n  const numCol = 9;\r\n\r\n  // let cells = [];\r\n\r\n  const [cells, setCells] = useState([]);\r\n\r\n  // const addCell = (newCell) =>{\r\n  //   console.log(\"Adding cell : \", newCell);\r\n  //   setCells([...cells, newCell]);\r\n  // }\r\n\r\n  useEffect(() => {\r\n\r\n    const tempCells = [];\r\n    let key = 0;\r\n    for (let row = 0; row < numRow; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < numCol; col++) {\r\n        currentRow.push(new Cell(key, col, row));\r\n        key++;\r\n      }\r\n      tempCells.push(currentRow);\r\n    }\r\n\r\n    console.log(tempCells);\r\n    setCells(tempCells);\r\n\r\n  }, [])\r\n\r\n\r\n  const ClearGridValues = () => {\r\n    const newGrid = [...cells];\r\n\r\n\r\n    newGrid.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        cell.actualValue = 0;\r\n        cell.guessedValue = 0;\r\n        cell.isGiven = false;\r\n      });\r\n    });\r\n    setCells(newGrid);\r\n\r\n  }\r\n\r\n  const LoadGridValues = (values) => {\r\n    ClearGridValues();\r\n    const newGrid = [...cells];\r\n\r\n    newGrid.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        if (values[cell.key] !== 0) {\r\n          cell.actualValue = values[cell.key];\r\n          cell.isGiven = true;\r\n        }\r\n      });\r\n    });\r\n    setCells(newGrid);\r\n  }\r\n\r\n\r\n  const ReplaceCellByCoord = (_cell) => {\r\n    let newCells = { ...cells };\r\n    let newCell = newCells[_cell.y][_cell.x];\r\n    //newCell = { ..._cell };\r\n    setCells(newCells);\r\n  }\r\n\r\n  const GetCellByCoord = (x, y) => {\r\n    return cells[y][x];\r\n  }\r\n\r\n  // row.find( cell => cell.key === _key)\r\n  const handleClickOnCell = (event, _key, isRightClick = false) => {\r\n    event.preventDefault();\r\n    let newCells = [...cells];\r\n\r\n    let clickedCell = null;\r\n    newCells.forEach(row => {\r\n      const search = row.find(cell => cell.key === _key);\r\n      if (search) clickedCell = search;\r\n    });\r\n\r\n    if (clickedCell != null) {\r\n      //console.log(clickedCell);\r\n      //calc new cell value\r\n      let newCellValue = clickedCell.guessedValue + (isRightClick ? -1 : 1);\r\n      newCellValue < 0 && (newCellValue = 9);\r\n      newCellValue > 9 && (newCellValue = 0);\r\n\r\n      //assign the new cell value and update de main array;\r\n      clickedCell.guessedValue = newCellValue;\r\n      setCells(newCells);\r\n\r\n\r\n      //GridFunc.returnEntireRowKeys(clickedCell);\r\n\r\n      let square = GridFunc.returnSquareKeys(clickedCell);\r\n\r\n      cells.forEach((row)=>{row.forEach((cell)=>{cell.highlighted=false})});\r\n\r\n      square.forEach((coords) =>{\r\n        const cellToUpdate = GetCellByCoord(coords[0], coords[1]);\r\n        cellToUpdate.highlighted = true;\r\n      })\r\n\r\n      GridFunc.returnEntireColCells(cells, clickedCell).forEach((cell)=>{cell.highlighted = true});\r\n      GridFunc.returnEntireRowCells(cells, clickedCell).forEach((cell)=>{cell.highlighted = true});\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <div className=\"grid\">\r\n        {\r\n          cells.map((row, rowId) => {\r\n            return (\r\n              <div key={rowId * 100}>\r\n                {row.map((cell, cellId) => <CellDisplay key={cell.key} cell={cell} handleClickOnCell={handleClickOnCell} />)}\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n      <button onClick={() => { LoadGridValues(GridValues.arrayA) }}>Load default values</button>\r\n      <button onClick={() => { ClearGridValues() }}>Clear all</button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}