{"version":3,"sources":["components/CellDisplay.jsx","scripts/Cell.js","scripts/solver.js","scripts/gridFunctions.js","scripts/gridValues.js","components/SolverResult.jsx","components/SidePanel.jsx","App.js","serviceWorker.js","index.js"],"names":["CellDisplay","cell","handleClickOnCell","handleMouseOver","useState","clickedOn","setClickedOn","handleClick","e","isRightClick","key","isGiven","cellClass","highlighted","className","onMouseOver","actualValue","solvedValue","onTransitionEnd","onClick","onContextMenu","guessedValue","displayCellValue","Cell","this","x","y","Math","floor","possibleValues","printCellInfo","console","table","setPossibleValues","array","clearCell","setGivenValue","val","setGuessedValue","setSolvedValue","setHovered","hovered","getCellInfo","loopCount","cloneGrid","_cells","map","object","returnEntireRowCells","cells","row","entireRow","i","push","returnEntireColCells","entireCol","col","returnSquareKeys","dx","dy","squareKeys","forEach","cellCoords","returnSquareCells","keys","res","some","getSeveralCellByKey","arrayA","solveGrid","addToHistory","stepByStep","newCells","GridFunc","generatorStepByStep","resString","cellsToHide","maxLoop","Error","currentCell","pValues","getPossibleValuesForCell","shuffledVal","shuffle","v","updateValue","length","j","random","getRandomCellKeysToHide","nbOfCellToHide","hide","r","indexOf","_cell","_val","considerGuessedValues","valuesAvailability","Array","fill","cellsInRange","concat","filter","item","el","SolverResult","solverResult","step","SidePanel","handleClickOnSolve","handleClickOnGenerate","handleClickOnClearAll","handleClickOnLoadValues","cellInfo","DivCellInfo","Object","join","history","clearGrid","App","setCells","setSolverResult","setCellInfo","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Tick","ClearGridValues","log","shift","_newStep","tempCells","_cellKey","Solver","keysToHighlight","_key","highlight","event","preventDefault","clickedCell","newCellValue","onMouseLeave","difficulty","generatedGrid","tentatives","values","LoadGridValues","GridValues","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9fd35d25.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction CellDisplay({ cell, handleClickOnCell,handleMouseOver }) {\r\n  const [clickedOn, setClickedOn] = useState(false);\r\n\r\n  const handleClick = (e, isRightClick = false) => {\r\n    handleClickOnCell(e, cell.key, isRightClick);\r\n    setClickedOn(true);\r\n  };\r\n\r\n  const displayCellValue = () => {\r\n    if (cell.isGiven){\r\n      const cellClass = \"cell-inner isGiven \" + (cell.highlighted ? \" highlighted\" : \"\");\r\n      return (\r\n\r\n        <div \r\n        className={cellClass}\r\n        onMouseOver={() => {handleMouseOver(cell.key)}}\r\n        >\r\n          <span className=\"cell-number\">{cell.actualValue}</span>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else if(cell.solvedValue > 0){\r\n      const cellClass = \"cell-inner isSolved \" + (cell.highlighted ? \" highlighted\" : \"\");\r\n      return (\r\n\r\n        <div \r\n          className={cellClass}\r\n          onMouseOver={() => {handleMouseOver(cell.key)}}\r\n        >\r\n          <span className=\"cell-number\">{cell.solvedValue}</span>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else if(cell.actualValue > 0){\r\n      const cellClass = \"cell-inner isActual \" + (cell.highlighted ? \" highlighted\" : \"\");\r\n      return (\r\n\r\n        <div \r\n          className={cellClass}\r\n          onMouseOver={() => {handleMouseOver(cell.key)}}\r\n        >\r\n          <span className=\"cell-number\">{cell.actualValue}</span>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    else {\r\n      const cellClass = \"cell-inner notGiven \" + (clickedOn ? \" clicked\" : \"\") + (cell.highlighted ? \" highlighted\" : \"\");\r\n      return (\r\n\r\n        <div\r\n          className={cellClass}\r\n          onMouseOver={() => {handleMouseOver(cell.key)}}\r\n          onTransitionEnd={() => {setClickedOn(false)}}\r\n          onClick={(e) => {\r\n            handleClick(e);\r\n          }}\r\n          onContextMenu={(e) => {\r\n            handleClick(e, true);\r\n          }}\r\n        >\r\n          <span className=\"cell-number\">\r\n            {cell.guessedValue === 0 ? \"\" : cell.guessedValue}\r\n          </span>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return displayCellValue();\r\n}\r\n\r\nexport default CellDisplay;\r\n","export default function Cell(key){\r\n    \r\n    this.key = key;\r\n    this.x = key%9;\r\n    this.y = Math.floor(key/9);\r\n    this.guessedValue = 0;\r\n    this.actualValue = 0;\r\n    this.solvedValue = 0;\r\n    this.isGiven = false;\r\n    this.highlighted = false;\r\n    this.possibleValues = [];\r\n\r\n\r\n\r\n    this.printCellInfo = function(){\r\n        console.table(this);\r\n    };\r\n\r\n    this.setPossibleValues = function(array){\r\n        this.possibleValues = array;\r\n    };\r\n\r\n    this.clearCell = function(){\r\n        this.guessedValue = 0;\r\n        this.actualValue = 0;\r\n        this.solvedValue = 0;\r\n        this.isGiven = false;\r\n        this.highlighted = false;\r\n        this.possibleValues = [];\r\n    };\r\n\r\n    this.setGivenValue = function(val){\r\n        this.actualValue = val;\r\n        this.isGiven = true;\r\n    };\r\n\r\n    this.setGuessedValue = function (val) {\r\n        this.guessedValue = val;\r\n    };\r\n\r\n    this.setSolvedValue =  function (val) {\r\n        this.solvedValue = val;\r\n    };\r\n\r\n    this.setHovered = function (hovered){\r\n        this.highlighted = hovered;\r\n    }\r\n\r\n\r\n\r\n    \r\n    this.getCellInfo = function(){\r\n        return{\r\n            key:this.key,\r\n            x:this.x,\r\n            y:this.y,\r\n            guessedValue:this.guessedValue,\r\n            actualValue:this.actualValue,\r\n            isGiven:this.isGiven,\r\n            highlighted:this.highlighted,\r\n            possibleValues:this.possibleValues,\r\n        }\r\n    };\r\n\r\n}\r\n","import * as GridFunc from './gridFunctions.js';\r\n\r\nlet loopCount;\r\nconst maxLoop = 500;\r\nexport const generateAGrid = (_cells, addToHistory, stepByStep, nbOfCellToHide = 10) => {\r\n    let newCells = [];\r\n    \r\n    let tentatives = 0;\r\n    while(tentatives < 300){\r\n        tentatives ++;\r\n        loopCount = 0;\r\n        newCells = GridFunc.cloneGrid(_cells);\r\n        const cellsToHide = getRandomCellKeysToHide(nbOfCellToHide);\r\n        const res = generatorStepByStep(newCells, 0, addToHistory, cellsToHide, stepByStep);\r\n        console.log(\"loop count : \", loopCount, \"tentatives : \", tentatives, cellsToHide.length);\r\n        if(loopCount > maxLoop || !res){\r\n            addToHistory(-1)\r\n        } //retry\r\n        else{\r\n            console.log(\"loop count : \", loopCount, \"tentatives : \", tentatives, res);\r\n            return\r\n        } // success\r\n    }\r\n    return newCells;\r\n}\r\n\r\n\r\nexport const solveGrid = (_cells, addToHistory = null, stepByStep = false) =>{\r\n    let newCells = GridFunc.cloneGrid(_cells);\r\n    \r\n    let res = generatorStepByStep(newCells, 0, addToHistory, [], stepByStep);\r\n    \r\n    const resString = res ? \"Success\" : \"Error\"\r\n    return [newCells, resString];\r\n}\r\n\r\n\r\nexport const generatorStepByStep = (_cells, key, addToHistory, cellsToHide, stepByStep) => {\r\n    loopCount ++;\r\n    if(loopCount > maxLoop) {\r\n        return false;\r\n    }\r\n    if (loopCount > maxLoop + 100 )throw new Error(\"Error while generating the grid\");\r\n    const useGuessedValues = true;\r\n\r\n    if (key >= 9 * 9) { return true }  //Solving finished\r\n\r\n    const currentCell = _cells[key];\r\n    const cellValue = (\r\n        currentCell.solvedValue > 0 \r\n        || currentCell.actualValue > 0 \r\n        || (useGuessedValues && currentCell.guessedValue > 0)\r\n    )\r\n\r\n    // this cell is already solved, go to next cell\r\n    if (cellValue) {return generatorStepByStep(_cells, key + 1, addToHistory, cellsToHide, stepByStep); }\r\n\r\n    const pValues = getPossibleValuesForCell(_cells, currentCell);\r\n    let shuffledVal = shuffle([1,2,3,4,5,6,7,8,9]);\r\n    for (let v = 1; v <= 9; v++) {\r\n        if (pValues.some(e=> e === shuffledVal[v-1])){\r\n            updateValue(currentCell, shuffledVal[v-1], stepByStep, cellsToHide, addToHistory, key);\r\n            \r\n            // try to resolve the rest of the array with this value for the current cell\r\n            if ( generatorStepByStep (_cells, key+1, addToHistory, cellsToHide, stepByStep) ) return true; \r\n        }\r\n    }\r\n\r\n    updateValue(currentCell, 0, stepByStep, cellsToHide, addToHistory, key);\r\n\r\n    return false // this grill is not solvable, going back to previous recursion.\r\n}\r\n\r\n\r\n\r\n//**********************   Utilities  **************************************/\r\n\r\nconst shuffle = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array\r\n}\r\n\r\n\r\nconst getRandomCellKeysToHide = (nbOfCellToHide) => {\r\n    if(!nbOfCellToHide || nbOfCellToHide >= 9*9-1) {return}\r\n    const hide = [];\r\n    while(hide.length < nbOfCellToHide){\r\n        let r = Math.floor(Math.random() * (9*9-1)) ;\r\n        if(hide.indexOf(r) === -1) hide.push(r);\r\n    }\r\n    return hide;\r\n}\r\n\r\n\r\nconst updateValue = (_cell, _val, stepByStep, cellsToHide, addToHistory, key) => {\r\n    if(cellsToHide.indexOf(key) !== -1){_cell.actualValue = _val; }\r\n    else {\r\n        _cell.setSolvedValue(_val)\r\n        if (stepByStep) {\r\n            addToHistory({\r\n                key: _cell.key,\r\n                solvedValue: _val,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const getPossibleValuesForCell = (cells, cell, considerGuessedValues = true) => {\r\n    const valuesAvailability = new Array(9).fill(1);\r\n    \r\n    //get all the cells in range of the selected one\r\n    let cellsInRange = []\r\n    cellsInRange = cellsInRange.concat(GridFunc.returnSquareCells(cells, cell));\r\n    cellsInRange = cellsInRange.concat(GridFunc.returnEntireRowCells(cells, cell));\r\n    cellsInRange = cellsInRange.concat(GridFunc.returnEntireColCells(cells, cell));\r\n\r\n    //filter out the selected cell\r\n    cellsInRange = cellsInRange.filter((item)=>item.key !== cell.key);\r\n\r\n    //find which values are already used among all the cells in range\r\n    cellsInRange.forEach((el)=>{\r\n        if(el.actualValue > 0) valuesAvailability[el.actualValue-1] = 0; \r\n        else if(el.solvedValue > 0) valuesAvailability[el.solvedValue-1] = 0; \r\n        else if(considerGuessedValues && el.guessedValue > 0) valuesAvailability[el.guessedValue-1] = 0;\r\n    })\r\n\r\n    // create an array with only the available values\r\n    const possibleValues = [];\r\n    valuesAvailability.forEach((el,i) => {\r\n        if(el){possibleValues.push(i+1)}\r\n        //index goes from 0 to 8, but we want to return 1 to 9\r\n    });\r\n\r\n    return possibleValues;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n\r\nexport const solverLoop = (solvedCells, nbOfGuessAllowed) =>{\r\n    let nbOfValueFound = 0;\r\n    let nbOfCellWithSeveralPossibilites = 0;\r\n\r\n    solvedCells.forEach(row => {\r\n        row.forEach(cell => {\r\n            //console.log(cell.key);\r\n            if (cell.actualValue === 0) {\r\n                const possibleValues = getPossibleValuesForCell(solvedCells, cell);\r\n                if (possibleValues.length === 0) {\r\n                    console.log(\"Can't solve cell \", cell.key);\r\n                    return;\r\n                }\r\n                if (possibleValues.length === 1) {\r\n                    cell.actualValue = possibleValues[0];\r\n                    //console.log(\"new value for cell \" , cell.key);\r\n                    nbOfValueFound ++;\r\n                }\r\n                if (possibleValues.length > 1){\r\n                    nbOfCellWithSeveralPossibilites ++;\r\n                }\r\n            }\r\n        })\r\n    })\r\n\r\n    return [nbOfValueFound, nbOfCellWithSeveralPossibilites];\r\n}\r\n\r\nexport const solver = (cells) => {\r\n    let solvedCells = [ ...cells]\r\n    let nbOfValueFound = 0;\r\n    let nbOfCellRemaining = 9*9;\r\n    let nbOfGuessAllowed = 0;\r\n    let status = \"\";\r\n\r\n    let loopCount = 0;\r\n    while (nbOfCellRemaining > 0 && loopCount < 100){\r\n        \r\n        const loopRes = solverLoop(solvedCells, nbOfGuessAllowed);\r\n        nbOfValueFound = loopRes[0]\r\n        if( nbOfValueFound ===0) \r\n        {\r\n            console.log(\"break\");\r\n            status = \"Couldn't resolve with simple solver.\"\r\n            break;\r\n        }\r\n        nbOfCellRemaining = loopRes[1];\r\n\r\n        console.log(\"loop count : \" , loopCount);\r\n        loopCount ++;\r\n\r\n    }\r\n    if(nbOfCellRemaining === 0) status = \"Solved in \" + loopCount + \" loops.\";\r\n    \r\n    return [solvedCells, status];\r\n}\r\n\r\n\r\n**/\r\n\r\n\r\n\r\n/*\r\nexport const recursiveValidation = (_cells, key, addToHistory, cellsToHide, stepByStep) => {\r\n    const useGuessedValues = true;\r\n    if (key >= 9 * 9) { return true }  //Solving finished\r\n\r\n    const currentCell = _cells[key];\r\n    const cellValue = currentCell.solvedValue > 0 \r\n        || currentCell.actualValue > 0 \r\n        || (useGuessedValues && currentCell.guessedValue > 0)\r\n    if (cellValue) {\r\n        // this cell is already solved, go to next cell\r\n        return recursiveValidation(_cells, key + 1, addToHistory,cellsToHide, stepByStep);\r\n    }\r\n\r\n    const pValues = getPossibleValuesForCell(_cells, currentCell);\r\n    for (let v = 0; v <= 8; v++) {\r\n        let shuffledVal = shuffle([1,2,3,4,5,6,7,8,9]);\r\n        //console.log(\"key : \", currentCell.key, \"v :  \", v, \"pValues : \", pValues);\r\n        if (pValues.some(e=> e === shuffledVal[v])){\r\n            updateValue(currentCell, shuffledVal[v], stepByStep, [], addToHistory, key)\r\n            \r\n\r\n            // try to resolve the rest of the array with this value for the current cell\r\n            if ( recursiveValidation (_cells, key+1, addToHistory, cellsToHide,stepByStep) )\r\n                return true; \r\n        }\r\n\r\n    }\r\n    currentCell.setSolvedValue(0) // no value possible for this cell, reset it to 0.\r\n    if(stepByStep){\r\n        addToHistory( {\r\n            key:currentCell.key,\r\n            solvedValue:0\r\n        } )\r\n    }\r\n    return false // this grill is not solvable, going back to previous recursion.\r\n}\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n// return -1 if nothing to solve\r\n// 0->80 if key found\r\nexport const getNextCellToSolve = (_cells, _cell) => {\r\n    let keyToFind = _cell.key+1 >= 9*9 ? 0 : _cell.key+1;\r\n    console.log(_cell.key, keyToFind);\r\n    const maxLoop = 9*9;\r\n    let i = 0;\r\n    while(i < maxLoop){\r\n        const coords = GridFunc.KeyToCoord(keyToFind);\r\n        console.log(\"coords : \"+ coords);\r\n        const cellToCheck = _cells[coords[1]][coords[0]];\r\n        \r\n        if(cellToCheck.actualValue <= 0){\r\n            return cellToCheck\r\n        }\r\n\r\n        keyToFind = keyToFind+1 >= 9*9 ? 0 : keyToFind+1;\r\n        i++;\r\n    }\r\n    return -1;\r\n}\r\n*/","/**\r\n* Return the keys of all the other cells in the Col.\r\n* @param {object} cell an object of type \"cell\".\r\n* @returns {Array} Array of cells keys.\r\n*/\r\n/*\r\nexport const returnEntireColKeys = (cell) => {\r\n\r\n    const res = []\r\n    for (let i = 0; i < 9; i++) {\r\n        res.push(cell.x + 9 * i);\r\n    }\r\n    return res;\r\n}\r\n*/\r\n\r\nexport const cloneGrid = (_cells) => {\r\n    return _cells.map(object => ({ ...object }))\r\n}\r\n\r\nexport const returnEntireRowCells = (cells, cell) => {\r\n    const row  = cell.y;\r\n    const entireRow = [];\r\n\r\n    for(let i = 0 ; i < 9*9; i++){\r\n        if (Math.floor(i/9) === row){\r\n            entireRow.push(cells[i]);\r\n        }\r\n    }\r\n    return entireRow;\r\n}\r\n\r\nexport const returnEntireRowKeys = (_cells, _key) => {\r\n    const row  = _cells[_key].y;\r\n    const entireRow = [];\r\n\r\n    for(let i = 0 ; i < 9*9; i++){\r\n        if (Math.floor(i/9) === row){\r\n            entireRow.push(i);\r\n        }\r\n    }\r\n    return entireRow;\r\n}\r\n\r\n\r\nexport const returnEntireColCells = (cells, cell) => {\r\n    const entireCol = [];\r\n    const col = cell.x;\r\n\r\n    for (let i = 0 ; i < 9*9 ; i++){\r\n        if(i%9 === col){\r\n            entireCol.push(cells[i]);\r\n        }\r\n    }\r\n    return entireCol;\r\n}\r\n\r\nexport const returnEntireColKeys = (_cells, _key) => {\r\n    const entireCol = [];\r\n    const col = _cells[_key].x;\r\n\r\n    for (let i = 0 ; i < 9*9 ; i++){\r\n        if(i%9 === col){\r\n            entireCol.push(i);\r\n        }\r\n    }\r\n    return entireCol;\r\n}\r\n\r\nexport const coordToKey = (x ,y) => {\r\n    return ( 9*y + x);\r\n}\r\nexport const KeyToCoord = (key) => {\r\n    return ([key%9,Math.floor(key/9)] );\r\n}\r\n\r\n\r\n\r\nexport const returnSquareKeys = (cell) => {\r\n    const dx = Math.floor(cell.x / 3);\r\n    const dy = Math.floor(cell.y / 3);\r\n\r\n    const squareCoords = [\r\n        [dx * 3 + 0, dy * 3 + 0], [dx * 3 + 1, dy * 3 + 0], [dx * 3 + 2, dy * 3 + 0],\r\n        [dx * 3 + 0, dy * 3 + 1], [dx * 3 + 1, dy * 3 + 1], [dx * 3 + 2, dy * 3 + 1],\r\n        [dx * 3 + 0, dy * 3 + 2], [dx * 3 + 1, dy * 3 + 2], [dx * 3 + 2, dy * 3 + 2]\r\n    ]\r\n\r\n    const squareKeys = []\r\n    \r\n    squareCoords.forEach((cellCoords) => {\r\n        squareKeys.push(coordToKey(cellCoords[0], cellCoords[1]));\r\n    }) \r\n\r\n    return (squareKeys);\r\n}\r\n\r\n\r\n\r\nexport const getSeveralCellByKey = (cells, keys) => {\r\n    const res = [] \r\n    cells.forEach((cell)=>{\r\n            const isSearched = keys.some((key)=>key ===  cell.key)\r\n            if (isSearched) {res.push(cell);}\r\n    })\r\n    \r\n    return res;\r\n}\r\n\r\nexport const returnSquareCells = (cells, cell) => {\r\n    const keys = returnSquareKeys(cell);\r\n    return getSeveralCellByKey (cells, keys) ;\r\n}\r\n\r\n\r\n","export const arrayA = [\r\n\r\n1, 0, 6,   0, 0, 2,   3, 0, 0,\r\n0, 5, 0,   0, 0, 6,   0, 9, 1,\r\n0, 0, 9,   5, 0, 1,   4, 6, 2,\r\n\r\n0, 3, 7,   9, 0, 5,   0, 0, 0,\r\n5, 8, 1,   0, 2, 7,   9, 0, 0,\r\n0, 0, 0,   4, 0, 8,   1, 5, 7,\r\n\r\n0, 0, 0,   2, 6, 0,   5, 4, 0,\r\n0, 0, 4,   1, 5, 0,   6, 0, 9,\r\n9, 0, 0,   8, 7, 4,   2, 1, 0,\r\n\r\n]\r\n\r\n\r\n\r\nexport const arrayAcompleted = [\r\n\r\n    1, 4, 6,   7, 9, 2,   3, 8, 5,\r\n    2, 5, 8,   3, 4, 6,   7, 9, 1,\r\n    3, 7, 9,   5, 8, 1,   4, 6, 2,\r\n    \r\n    4, 3, 7,   9, 1, 5,   8, 2, 6,\r\n    5, 8, 1,   6, 2, 7,   9, 3, 4,\r\n    6, 9, 2,   4, 3, 8,   1, 5, 7,\r\n    \r\n    7, 1, 3,   2, 6, 9,   5, 4, 8,\r\n    8, 2, 4,   1, 5, 3,   6, 7, 9,\r\n    9, 6, 5,   8, 7, 4,   2, 1, 3,\r\n    \r\n    ]","import React from 'react'\r\n\r\nfunction SolverResult({solverResult, step}) {\r\n    if(solverResult !== \"\"){\r\n        return (\r\n                <p><b>Solver result : </b>{solverResult}</p>\r\n        )\r\n    }\r\n    else return null\r\n    \r\n}\r\n\r\nexport default SolverResult\r\n","import React from 'react'\r\n\r\nimport SolverResult from './SolverResult';\r\n\r\nimport '../styles/SidePanel.scss';\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction SidePanel({handleClickOnSolve, handleClickOnGenerate, handleClickOnLoadValues, handleClickOnClearAll, solverResult, cellInfo}) {\r\n    \r\n    let DivCellInfo = \"\";\r\n    if(Object.keys(cellInfo).length > 0){\r\n        DivCellInfo = (\r\n            <div className=\"cell-info-inner\">\r\n            <h3>Cell #{cellInfo.key} [{cellInfo.x}, {cellInfo.y}]</h3>\r\n            <p>Possible values : {cellInfo.possibleValues.join(\", \")} </p>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    \r\n    return (\r\n        <div className=\"side-panel\">\r\n            <div className=\"side-panel-container\">\r\n\r\n            \r\n                <div className=\"button-container button-container-clear\">\r\n                    <button onClick={handleClickOnClearAll}>CLEAR ALL</button>\r\n                </div>\r\n              \r\n                <div className=\"button-container button-container-generate\">\r\n                    <h3 >Generator</h3>\r\n                    {/* <button onClick={handleClickOnLoadValues}>Load default values</button> */}\r\n                    <button onClick={() => { handleClickOnGenerate(true, 20) }}>Generate grid Easy</button>\r\n                    <button onClick={() => { handleClickOnGenerate(true, 35) }}>Generate grid Medium</button>\r\n                    <button onClick={() => { handleClickOnGenerate(true, 50) }}>Generate grid Hard</button>\r\n\r\n                </div>\r\n\r\n                <div className=\"button-container button-container-solver\">\r\n                    <h3 >Solver</h3>\r\n                    <button onClick={() => { handleClickOnSolve(false) }}>Solve</button>\r\n                     <button onClick={() => { handleClickOnSolve(true) }}>Solve (step by step)</button>\r\n                     <SolverResult solverResult={solverResult} />\r\n                </div>\r\n\r\n                <div className=\"cell-info-container\">\r\n                    { DivCellInfo}\r\n                </div>\r\n\r\n           \r\n           </div>\r\n              \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidePanel\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport CellDisplay from './components/CellDisplay';\r\nimport Cell from './scripts/Cell';\r\nimport * as GridFunc from './scripts/gridFunctions.js';\r\nimport * as GridValues from './scripts/gridValues.js';\r\nimport * as Solver from './scripts/solver.js';\r\nimport SidePanel from './components/SidePanel';\r\n\r\nimport './styles/App.scss';\r\n\r\nlet history = [];\r\nlet clearGrid = false;\r\nfunction App() {\r\n\r\n  const [cells, setCells] = useState([]);\r\n  const [solverResult, setSolverResult] = useState(\"\");\r\n  const [cellInfo, setCellInfo] = useState({});\r\n\r\n\r\n \r\n\r\n  useInterval(() => {\r\n    Tick()\r\n  }, 10);\r\n\r\n  \r\n  const Tick = () => {\r\n    // PLAY HISTORY\r\n    if(clearGrid){\r\n      setCells(ClearGridValues(cells));\r\n      clearGrid = false;\r\n      console.log(\"clear\");\r\n    }\r\n    else if(history.length > 0){\r\n      const newCells = [...cells];\r\n\r\n      newCells[history[0].key].setSolvedValue(history[0].solvedValue);\r\n      setCells(newCells);\r\n      history.shift();\r\n\r\n    } \r\n\r\n  }\r\n\r\n \r\n   \r\n  const addToHistory = (_newStep) =>{\r\n    if(_newStep === -1){\r\n      history = [];\r\n    }\r\n    else{\r\n      history = history.concat(_newStep);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    let tempCells = [];\r\n    for (let i = 0; i < 9*9; i++) {\r\n        tempCells.push(new Cell(i));\r\n    }\r\n\r\n    console.log(tempCells);\r\n    //tempCells = LoadGridValues(tempCells, GridValues.arrayA)\r\n    setCells(tempCells);\r\n\r\n\r\n   \r\n  }, [])\r\n\r\n  const ClearGridValues = (_cells) => {\r\n    let newCells = GridFunc.cloneGrid(_cells);\r\n    \r\n    history = []; //clear history\r\n    newCells.forEach(cell => {\r\n       cell.clearCell();\r\n    });\r\n\r\n    return newCells;\r\n\r\n  }\r\n\r\n  const LoadGridValues = (_cells, values) => {\r\n    let newCells = GridFunc.cloneGrid(_cells);\r\n    \r\n    history = []; //clear history\r\n    newCells = ClearGridValues(newCells);\r\n    newCells.forEach(cell => {\r\n      if (values[cell.key] !== 0) {\r\n        cell.setGivenValue(values[cell.key]);\r\n      }\r\n    });\r\n    return newCells\r\n  }\r\n  const handleClickOnClearAll = () =>{\r\n    setCells(ClearGridValues(cells));\r\n  }\r\n  const handleClickOnLoadValues = () =>{\r\n    setCells(LoadGridValues(cells, GridValues.arrayA));\r\n  }\r\n\r\n\r\n  const handleClickOnSolve = (stepByStep = false) => {\r\n      \r\n    const solverResult = Solver.solveGrid(GridFunc.cloneGrid(cells), addToHistory, stepByStep)\r\n    if(!stepByStep){\r\n      setCells(solverResult[0]);\r\n    }\r\n    setSolverResult(solverResult[1]);\r\n  }\r\n\r\n  const handleClickOnGenerate = (stepByStep, difficulty) => {\r\n      let generatedGrid = GridFunc.cloneGrid(cells);\r\n      generatedGrid = Solver.generateAGrid(generatedGrid, addToHistory, true, difficulty);\r\n      if(generatedGrid && !stepByStep) setCells(generatedGrid);\r\n\r\n  }\r\n\r\n  const handleMouseLeaveGrid = () => {\r\n    setCellInfo({});\r\n    const newCells = GridFunc.cloneGrid(cells);\r\n    newCells.forEach(cell=> {\r\n      cell.setHovered(false);\r\n    })\r\n    setCells(newCells);\r\n  }\r\n\r\n  const handleMouseOver = (_cellKey) =>{\r\n    let newCells = GridFunc.cloneGrid(cells);\r\n    newCells[_cellKey].setPossibleValues(Solver.getPossibleValuesForCell(newCells, newCells[_cellKey]));\r\n    setCellInfo(newCells[_cellKey].getCellInfo());\r\n\r\n\r\n    let keysToHighlight = [];\r\n    keysToHighlight = keysToHighlight.concat(GridFunc.returnSquareKeys(newCells[_cellKey]));\r\n    keysToHighlight = keysToHighlight.concat(GridFunc.returnEntireColKeys(newCells, _cellKey));\r\n    keysToHighlight = keysToHighlight.concat(GridFunc.returnEntireRowKeys(newCells, _cellKey));\r\n\r\n    newCells.forEach((cell) => {\r\n        const highlight = (keysToHighlight.indexOf(cell.key) === -1 ) ? false : true;\r\n        cell.setHovered(highlight);\r\n    });\r\n    \r\n   setCells(newCells);\r\n    \r\n  }\r\n\r\n  const handleClickOnCell = (event, _key, isRightClick = false) => {\r\n    event.preventDefault();\r\n    let newCells = GridFunc.cloneGrid(cells);\r\n\r\n    let clickedCell = newCells[_key];\r\n\r\n    if (clickedCell != null) {\r\n      //calc new cell value\r\n      let newCellValue = clickedCell.guessedValue + (isRightClick ? -1 : 1);\r\n      newCellValue < 0 && (newCellValue = 9);\r\n      newCellValue > 9 && (newCellValue = 0);\r\n\r\n      //assign the new cell value and update de main array;\r\n      clickedCell.setGuessedValue(newCellValue);\r\n      setCells(newCells);\r\n  \r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"grid-container\">\r\n          <div className=\"grid\" onMouseLeave={handleMouseLeaveGrid}>\r\n            {\r\n              cells.map(cell => {\r\n                return (\r\n                  <CellDisplay\r\n                    key={cell.key}\r\n                    cell={cell}\r\n                    handleClickOnCell={handleClickOnCell}\r\n                    handleMouseOver={handleMouseOver}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n      </div>\r\n     \r\n      <SidePanel \r\n        cellInfo={cellInfo}\r\n        handleClickOnSolve={handleClickOnSolve}\r\n        handleClickOnGenerate={handleClickOnGenerate}\r\n        handleClickOnClearAll={handleClickOnClearAll}\r\n        handleClickOnLoadValues={handleClickOnLoadValues}\r\n        solverResult={solverResult}\r\n      />\r\n   \r\n      {/* <PossibleValues possibleValues={possibleValues}/> */}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n// Allow to use interval with hooks\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  });\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}